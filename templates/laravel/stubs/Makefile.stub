# {{PROJECT_NAME}} - Laravel Project Commands
.PHONY: help start stop restart build logs shell artisan composer npm status backup import

# Colors
GREEN = \033[32m
CYAN = \033[36m
YELLOW = \033[33m
RESET = \033[0m

.DEFAULT_GOAL := help

## Help
help:
	@echo "$(CYAN)üöÄ {{PROJECT_NAME}} Commands$(RESET)"
	@echo ""
	@echo "$(GREEN)Available commands:$(RESET)"
	@echo "  make start     - Start containers"
	@echo "  make stop      - Stop containers"
	@echo "  make restart   - Restart containers"
	@echo "  make build     - Build containers"
	@echo "  make logs      - Show logs"
	@echo "  make shell     - Open app shell"
	@echo "  make artisan   - Run artisan command (e.g., make artisan CMD='migrate')"
	@echo "  make composer  - Run composer command"
	@echo "  make npm       - Run npm command"
	@echo "  make status    - Show container status"
	@echo "  make backup    - Backup database to sqlback/ folder"
	@echo "  make import    - Import latest SQL file from sqlback/ folder"
	@echo ""

## Start containers
start:
	@echo "$(CYAN)üöÄ Starting {{PROJECT_NAME}}...$(RESET)"
	@docker-compose up -d
	@echo "$(GREEN)‚úÖ {{PROJECT_NAME}} started!$(RESET)"
	@echo "$(CYAN)üåê App: http://localhost:{{APP_PORT}}$(RESET)"

## Stop containers
stop:
	@echo "$(CYAN)‚èπÔ∏è Stopping {{PROJECT_NAME}}...$(RESET)"
	@docker-compose down
	@echo "$(GREEN)‚úÖ {{PROJECT_NAME}} stopped!$(RESET)"

## Restart containers
restart: stop start

## Build containers
build:
	@echo "$(CYAN)üî® Building {{PROJECT_NAME}}...$(RESET)"
	@docker-compose build --no-cache
	@echo "$(GREEN)‚úÖ Build complete!$(RESET)"

## Show logs
logs:
	@docker-compose logs -f --tail=100

## Open shell
shell:
	@docker-compose exec app /bin/bash

## Run artisan commands
artisan:
	@if [ -z "$(CMD)" ]; then \
		echo "$(YELLOW)Usage: make artisan CMD='command'$(RESET)"; \
	else \
		docker-compose exec app php artisan $(CMD); \
	fi

## Run composer commands
composer:
	@if [ -z "$(CMD)" ]; then \
		echo "$(YELLOW)Usage: make composer CMD='command'$(RESET)"; \
	else \
		docker-compose exec app composer $(CMD); \
	fi

## Run npm commands
npm:
	@if [ -z "$(CMD)" ]; then \
		echo "$(YELLOW)Usage: make npm CMD='command'$(RESET)"; \
	else \
		docker-compose exec app npm $(CMD); \
	fi

## Show status
status:
	@echo "$(CYAN)üìä {{PROJECT_NAME}} Status:$(RESET)"
	@docker-compose ps

## Backup database
backup:
	@echo "$(CYAN)üíæ Creating database backup...$(RESET)"
	@mkdir -p sqlback
	@docker-compose exec db mysqldump -u root -ppassword {{PROJECT_NAME}} > sqlback/backup_$(shell date +%Y%m%d_%H%M%S).sql
	@echo "$(GREEN)‚úÖ Database backed up to sqlback/ folder$(RESET)"
	@ls -la sqlback/

## Import SQL file
import:
	@echo "$(CYAN)üì• Importing latest SQL file...$(RESET)"
	@if [ ! -d "sqlback" ]; then \
		echo "$(YELLOW)‚ùå sqlback/ folder not found. Please create it and add SQL files.$(RESET)"; \
		exit 1; \
	fi
	@LATEST_SQL=$$(ls -t sqlback/*.sql 2>/dev/null | head -n1); \
	if [ -z "$$LATEST_SQL" ]; then \
		echo "$(YELLOW)‚ùå No SQL files found in sqlback/ folder$(RESET)"; \
		exit 1; \
	else \
		echo "$(CYAN)üì• Importing: $$LATEST_SQL$(RESET)"; \
		docker-compose exec -T db mysql -u root -ppassword {{PROJECT_NAME}} < "$$LATEST_SQL"; \
		echo "$(GREEN)‚úÖ SQL file imported successfully!$(RESET)"; \
	fi
